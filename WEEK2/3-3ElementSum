#include <bits/stdc++.h>
#include<vector>
#include<map>
using namespace std;

bool find3Numbers(int A[], int n, int x)
{
    int l, r;
    for (int i = 0; i < n - 2; i++)
    {

        for (int j = i + 1; j < n - 1; j++)
        {
            for (int k = j + 1; k < n; k++)
            {
                if (A[i] + A[j] + A[k] == sum)
                {
                    cout << "Triplet is " << A[i] <<
                        ", " << A[j] << ", " << A[k];
                    return true;
                }
            }
        }
    }
    return false;
}

//2ptr method

#include <bits/stdc++.h>
using namespace std;

bool find3Numbers(int A[], int n, int x)
{
    int l, r;
    sort(A, A + arr_size);

    for (int i = 0; i < n - 2; i++) {

        l = i + 1; 
 
        r =   n - 1;
        while (l < r) {
            if (A[i] + A[l] + A[r] == x) {
                cout<<"Triplet is "<<A[I]<<A[J]<<A[K];
                return true;
            }
            else if (A[i] + A[l] + A[r] < sum)
                l++;
            else // A[i] + A[l] + A[r] > sum
                r--;
        }
    }
    return false;
}


 //hash table method
 bool find3Numbers(int A[], int arr_size, int sum)
{
    for (int i = 0; i < arr_size - 2; i++)
    {
        unordered_set<int> s;
        int curr_sum = sum - A[i];
        for (int j = i + 1; j < arr_size; j++)
        {
            if (s.find(curr_sum - A[j]) != s.end())
            {
                printf("Triplet is "<<A[i]<<A[j]<<curr_sum - A[j]);
                return true;
            }
            s.insert(A[j]);
        }
    }
 
    return false;
}
